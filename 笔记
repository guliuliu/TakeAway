1、面向对象的第四个特新  抽象类
使用场景: 在程序中,普通类描述具体的对象实例,
但还存在一种不能具体描述实例对象的,定义的这个类中,没有详细的实现细节,此时就可以使用抽象类

抽象的关键字: abstract
abstract 可修饰类,可修饰方法
① 被abstract修饰的抽象类,不能实例化(new)对象,但可以子类可继承

问: 抽象类不能实例化对象了,在抽象类中存在的无参/有参构造存在目的是什么?
 外部程序不能实例化,但抽象类中存在的无参/有参构造是给 继承该抽象类的子类应用的;
常识: 程序在设计使用时,一般出现抽象类的场景,必定存在继承关系

② 被abstract修饰的方法,叫抽象方法,抽象方法没有方法体,子类必须实现父类的抽象方法
③ 抽象类中可以有 0~多个抽象方法,但抽象方法必须在抽象类中


普通类(class) 和 抽象(abstract)类区别
普通类定义的所有内容,抽象类中都可定义

注: 抽象类通常结合继承使用,继承的特点: 方法复用,有且只有一个直接父类,是单根继承

2、接口 : 
	现实生活中,接口体现   鼠标 --> 电脑    / 投影仪 --> 电脑, 相互独立的个体,根据约定成俗的内容,就可以互相合作使用;
	程序中, 接口会提供一种 约定/约束, 符合约定才可相互成功调用;
		接口还提供一种 能力
	
定义接口的关键字: interface
实现接口的关键字: implements
接口可以多实现: 多个接口实现之间用  , 隔开
常识: 接口中能定义的成员属性  是  静态常量,访问修饰符只能是 public
	 接口中能定义的成员 方法 是 抽象方法,访问修饰符只能是 public
	 
3、枚举 (enum)	 : 一个特殊的类,通常程序出现固定不变的值(常量),就可使用枚举
	枚举定义的是一组静态常量
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 












